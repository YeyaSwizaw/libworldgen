/**
 * @mainpage libworldgen - Simple C++ World Generation Library
 * This is a library I created to be a wrapper around libnoise and make 
 * world generation as simple as possible. 
 * libnoise (http://libnoise.sourceforge.net/), while excellent when you
 * need a simple noise map generated, can get ugly very quickly when you want
 * to combine many modules into a complex world. 
 *
 * In libworldgen, you create define noisemaps based on parameters similar
 * to libnoise, however you then define tiles based on certain thresholds.
 *
 * Now, I'm not very good at explaining things, so below is a working example.
 * 
@code
int main(int argc, char* argv) {
	srand(time(NULL));
    
	wg::World* w = (new wg::World())->setChunkSize(50);
    
	wg::RandomNoiseMap* heightmap = new w->addRandomNoiseMap()
		->setSeed(std::to_string(rand()))
		->setGridSize(0.05);
   
	wg::RandomNoiseMap* climate = new w->addRandomNoiseMap()
		->setSeed(std::to_string(rand()))
		->setGridSize(0.075);
   
	wg::TileDef* tileSea = w->addTileDefinition() 
		->addConstraint({heightmap, wg::ConstraintType::LT, -0.4});
   
	wg::TileDef* tileMnt = w->addTileDefinition()
		->addConstraint({heightmap, wg::ConstraintType::GT, 0.6});
   
	wg::TileDef* tileDesert = w->addTileDefinition()
		->addConstraint({climate, wg::ConstraintType::LT, -0.5});
   
	wg::TileDef* tileForest = w->addTileDefinition()
		->addConstraint({climate, wg::ConstraintType::GT, 0.3});
   
	wg::TileDef* tilePlains = w->addTileDefinition();

   	for(auto row : w->generate(0, 0)) {
		for(auto t : row) {
			std::cout << t;

		} // for(auto t : row);
		
		std::cout << std::endl;

	} // for(auto row : w->generate(0, 0));

} // int main(int argc, char* argv);
@endcode
 */
